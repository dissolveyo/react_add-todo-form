{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","components/UsersSelect/UsersSelect.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","completed","title","userId","classNames","TodoList","todos","map","UsersSelect","users","value","getUser","usersFromServer","find","allTodos","App","useState","setTodos","inputValue","setInputValue","selectValue","setSelectValue","inputValidation","setInputValidation","selectValidation","setSelectValidation","handleChange","event","element","target","handleFormSubmit","e","preventDefault","isValid","isFormValid","todosId","largestId","Math","max","newTodo","current","action","method","onSubmit","htmlFor","type","placeholder","onChange","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f0b201ed.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React from 'react';\nimport { User } from '../../types/User';\n\ntype UserInfoProps = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<UserInfoProps> = ({\n  user,\n}) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {`${name}`}\n    </a>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype TodoInfoProps = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<TodoInfoProps> = ({ todo }) => {\n  const {\n    completed, title, user, userId, id,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={classNames(\n        'TodoInfo',\n        {\n          'TodoInfo--completed': completed,\n        },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {`${title}`}\n      </h2>\n\n      {user\n        && <UserInfo key={userId} user={user} />}\n    </article>\n  );\n};\n","import { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../../types/Todo';\n\ntype TodoListProps = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<TodoListProps> = ({\n  todos,\n}) => {\n  return (\n    <ul>\n      {todos.map((todo) => (\n        <li key={todo.id}>\n          <TodoInfo todo={todo} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React from 'react';\nimport { User } from '../../types/User';\n\ntype UsersSelectProps = {\n  users: User[]\n};\n\nexport const UsersSelect:React.FC<UsersSelectProps> = ({\n  users,\n}) => {\n  return (\n    <>\n      {users.map(user => (\n        <option key={user.id} value={user.id}>\n          {user.name}\n        </option>\n      ))}\n    </>\n  );\n};\n","import './App.scss';\n\nimport React, { ChangeEvent, FormEvent, useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { User } from './types/User';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\nimport { UsersSelect } from './components/UsersSelect/UsersSelect';\n\ntype HandleChangeTypes = HTMLInputElement | HTMLSelectElement;\n\nfunction getUser(userId: number): User | null {\n  const foundUser = usersFromServer.find((user) => user.id === userId);\n\n  return foundUser || null;\n}\n\nexport const allTodos: Todo[] = todosFromServer.map((todo) => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState(allTodos);\n  const [inputValue, setInputValue] = useState('');\n  const [selectValue, setSelectValue] = useState(0);\n  const [inputValidation, setInputValidation] = useState(true);\n  const [selectValidation, setSelectValidation] = useState(true);\n\n  const handleChange = (event: ChangeEvent<HandleChangeTypes>) => {\n    const element = event.target;\n\n    switch (element.name) {\n      case 'title':\n        setInputValue(element.value);\n        setInputValidation(true);\n        break;\n\n      case 'select':\n        setSelectValue(+element.value);\n        setSelectValidation(true);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const isFormValid = () => {\n    let isValid = true;\n\n    if (inputValue === '') {\n      setInputValidation(false);\n      isValid = false;\n    }\n\n    if (selectValue === 0) {\n      setSelectValidation(false);\n      isValid = false;\n    }\n\n    return isValid;\n  };\n\n  const handleFormSubmit = (e: FormEvent): void => {\n    e.preventDefault();\n    if (!isFormValid()) {\n      return;\n    }\n\n    const todosId = todos.map(todo => todo.id);\n    const largestId = Math.max(...todosId);\n    const user = getUser(selectValue);\n\n    const newTodo = {\n      id: largestId + 1,\n      title: inputValue,\n      userId: selectValue,\n      user,\n      completed: false,\n    };\n\n    setTodos(current => ([\n      ...current,\n      newTodo,\n    ]));\n\n    setInputValue('');\n    setSelectValue(0);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={(e) => handleFormSubmit(e)}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"titleField\">\n            Title:\n            <input\n              id=\"titleField\"\n              name=\"title\"\n              type=\"text\"\n              data-cy=\"titleInput\"\n              placeholder=\"Enter a title\"\n              value={inputValue}\n              onChange={(e) => handleChange(e)}\n            />\n          </label>\n\n          {inputValidation || (\n            <span className=\"error\">\n              Please enter a title\n            </span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"selectField\">\n            User:\n            <select\n              name=\"select\"\n              id=\"selectField\"\n              data-cy=\"userSelect\"\n              value={selectValue}\n              onChange={(e) => handleChange(e)}\n            >\n              <option value=\"0\" disabled>\n                Choose a user\n              </option>\n\n              <UsersSelect users={usersFromServer} />\n            </select>\n          </label>\n\n          {selectValidation || (\n            <span className=\"error\">\n              Please choose a user\n            </span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <section className=\"TodoList\">\n        <TodoList todos={todos} />\n      </section>\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}